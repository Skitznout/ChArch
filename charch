#!/usr/bin/env bash
# Written by Draco (tytydraco) @ GitHub

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="/sbin/.magisk/busybox:$PATH"

err() {
	echo -e "\e[91m[!] $@\e[39m"
	exit 1
}

# Check for required dependencies
for dep in chroot env id mkdir mount mountpoint readlink rm unarch which
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ `id -u` -ne 0 ]] && err "No root permissions. Exiting."

# Path containing rootfs tarball and all rootfs instances
if [[ -d "/data" ]]
then
	CHROOT_DIR="/data/unencrypted/charch"
else
	CHROOT_DIR="$HOME/charch"
fi

# Default command to execute on chroot enter
COMMAND="/usr/bin/env su -l"

usage() {
	echo -n "Usage: `basename $0` [OPTIONS] [NAME]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -c COMMAND		Command to execute inside the rootfs instance (default: $COMMAND)
  -k			Keep host mounts after exiting the chroot
  -h			Show usage
"
}

while getopts ":d:c:kh" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		c)
			COMMAND="$OPTARG"
			;;
		k)
			KEEP_MOUNTS=1
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# The name of the current rootfs instance
ROOTFS=${1:-rootfs}
[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Environmental variables for the chroot
ENV=(
	HOME="/root"
	TERM=${TERM:-xterm-256-color}
)

safe_mount_dir() {
	# Exit if we are already mounted
	mountpoint -q "$ROOTFS_DIR$1" &> /dev/null && return 0

	# Recursive bind if available, otherwise make a fallback
	if [[ -d "$1" ]]
	then
		mkdir -p "$ROOTFS_DIR$1"
		mount --rbind "$1" "$ROOTFS_DIR$1"
		mount --make-rslave "$ROOTFS_DIR$1"
	elif [[ ! -z "$2" ]]
	then
		mkdir -p "$ROOTFS_DIR$1"
		mount -t "$2" "$2" "$ROOTFS_DIR$1"
	fi
}

safe_mount_file() {
	# Exit if we are already mounted
	mountpoint -q "$ROOTFS_DIR$1" &> /dev/null && return 0

	# Bind if available
	if [[ -f "$1" ]]
	then
		mount --bind "$1" "$ROOTFS_DIR$1"
		mount --make-slave "$ROOTFS_DIR$1"
	fi
}


find_mountpoint() {
	local path=`readlink -f "$1"`
	until mountpoint -q "$path" &>/dev/null
	do
		path=${path%/*}
		path=${path:-/}

		# Break if we reach the end of the filesystem
		[[ "$path" == "/" ]] && ! mountpoint -q "/" &> /dev/null && break
	done
	echo "$path"
}

setup_mounts() {
	safe_mount_dir /dev tmpfs
	safe_mount_dir /sys sysfs
	safe_mount_dir /proc proc
	safe_mount_file /etc/resolv.conf

	# Remount data partition with suid to allow sudo to function
	local root_mount=`find_mountpoint "$CHROOT_DIR"`
	mountpoint -q "$root_mount" &> /dev/null && mount -o remount,suid,exec "$root_mount"
}

_chroot() {
	env -i "${ENV[@]}" `which chroot` "$ROOTFS_DIR" $@
}

[[ ! -d "$ROOTFS_DIR" ]] && err "No rootfs instance at $ROOTFS_DIR. Exiting."

# Mount host binds
setup_mounts

# Enter chroot environment
_chroot "$COMMAND"

# Try to unmount rootfs mounts
[[ "$KEEP_MOUNTS" -eq 0 ]] && unarch -d "$CHROOT_DIR" "$ROOTFS"

exit 0
