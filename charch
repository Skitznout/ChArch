#!/bin/bash
# Written by Draco (tytydraco) @ GitHub

# Path containing rootfs tarball and all rootfs instances
if [[ -d "/home" ]]
then
	CHROOT_DIR="/home/chroot"
else
	CHROOT_DIR="/data/local/chroot"
fi

# The name of the current rootfs instance
ROOTFS="rootfs"

usage() {
	echo -n "Usage: `basename $0` [OPTIONS]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: /data/local/chroot/)
  -n NAME		The name of the rootfs instance to create or enter (default: rootfs)
  -u URL		Specify a URL to fetch a rootfs tarball from (default: ARM Arch Linux)
  -c COMMAND		Command to execute inside the rootfs instance (default: /bin/bash -l)
  -f			Force a tarball refetch even if it already exists
  -i			Create a fresh /dev mount in the rootfs instance instead of binding it
  -U			Unmount the rootfs instance automatically after exiting
  -h			Show usage
"
}

while getopts "d:n:u:c:fiUh" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			;;
		u)
			ROOTFS_URL="$OPTARG"
			FORCE_FETCH=1
			;;
		c)
			COMMAND="$OPTARG"
			;;
		f)
			FORCE_FETCH=1
			;;
		i)
			ISOLATED=1
			;;
		U)
			UNMOUNT=1
			;;
		h)
			usage
			exit 0
			;;
		?)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="$PATH:/sbin/.magisk/busybox"

# Environmental variables for the chroot
_ENV=(
	PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"
	HOME="/root"
	SHELL="/bin/bash"
	TERM="xterm-256color"
)

# Check for required dependencies
for dep in awk chroot curl env find grep id mkdir mount mountpoint readlink rm sed tar uname unarch wc
do
	if ! command -v "$dep" &> /dev/null
	then
		echo "[!] Unable to locate dependency $dep. Exiting."
		exit 1
	fi
done

# Check for root permissions
if [[ `id -u` -ne 0 ]]
then
	echo "[!] No root permissions. Exiting."
	exit 1
fi

fetch_rootfs() {
	if [[ ! -f "$CHROOT_DIR/rootfs.tar.gz" ]] || [[ "$FORCE_FETCH" -eq 1 ]]
	then
		if [[ -z "$ROOTFS_URL" ]]
		then
			echo "[!] No rootfs tarball URL specified. Exiting."
			exit 1
		fi

		curl -# -L -o "$CHROOT_DIR/rootfs.tar.gz" "$ROOTFS_URL"

		if [[ $? -ne 0 ]]
		then
			echo "[!] Failed to fetch rootfs tarball. Exiting."
			exit 1
		fi
	fi
}

setup_rootfs() {
	mkdir -p "$ROOTFS_DIR"
	tar xf "$CHROOT_DIR/rootfs.tar.gz" -C "$ROOTFS_DIR" &> /dev/null

	if [[ $? -ne 0 ]]
	then
		echo "[!] Failed to extract rootfs tarball. Exiting."
		exit 1
	fi

	# Check for nested rootfs directory
	local dircount=`ls "$ROOTFS_DIR" | wc -w`
	if [[ "$dircount" -eq 1 ]]
	then
		local dirname=`ls "$ROOTFS_DIR" | head -n 1`
		find "$ROOTFS_DIR/$dirname" -maxdepth 1 -mindepth 1 -exec mv {} "$ROOTFS_DIR" \;
		rm -rf "$ROOTFS_DIR/$dirname"
	fi
}

safe_mount() {
	local type="$1"
	local name="$2"

	# Create the mount point if it is missing
	[[ ! -d "$ROOTFS_DIR/$name" ]] && mkdir -p "$ROOTFS_DIR/$name"

	# Bind if not already mounted
	if ! mountpoint -q "$ROOTFS_DIR/$name"
	then
		mount -t "$type" "$type" "$ROOTFS_DIR/$name"

		# Fail check
		if [[ $? -ne 0 ]]
		then
			echo "[!] Failed to mount $type. Exiting."
			exit 1
		fi
	fi
}

safe_bind() {
	local name="$1"

	# Create the mount point if it is missing
	[[ ! -d "$ROOTFS_DIR/$name" ]] && mkdir -p "$ROOTFS_DIR/$name"

	# Bind if not already mounted
	if ! mountpoint -q "$ROOTFS_DIR/$name" &> /dev/null
	then
		mount --bind "/$name" "$ROOTFS_DIR/$name"

		# Fail check
		if [[ $? -ne 0 ]]
		then
			echo "[!] Failed to mount $name. Exiting."
			exit 1
		fi
	fi
}

find_mountpoint() {
        local path=`readlink -f "$1"`
        until mountpoint -q "$path" &>/dev/null
        do
                path=${path%/*}
                path=${path:-/}
        done
        echo "$path"
}

setup_mounts() {
	if [[ "$ISOLATED" -eq 1 ]]
	then
		# Create a fresh dev mount without host hardware access
		safe_mount tmpfs dev
	else
		# Bind dev for hardware device access
		safe_bind dev dev
	fi

	# Create fresh mounts for these
	safe_mount devpts dev/pts
	safe_mount proc proc
	safe_mount sysfs sys
	safe_mount tmpfs tmp

	# Remount data partition with suid to allow sudo to function
	mount -o remount,suid,exec `find_mountpoint "$CHROOT_DIR"`
}

_chroot() {
	# Call with full path
	local chroot_path=`which chroot`

	# Consider using the default bash login command
	local command="$@"
	[[ -z "$@" ]] && command="/bin/bash -l"

	env -i "${_ENV[@]}" "$chroot_path" "$ROOTFS_DIR" $command
}

post_install() {
	# Add dns since userspace dns is volatile
	rm "$ROOTFS_DIR/etc/resolv.conf"
	echo "nameserver 1.1.1.1" > "$ROOTFS_DIR/etc/resolv.conf"
	echo "nameserver 1.0.0.1" >> "$ROOTFS_DIR/etc/resolv.conf"

	# Pacman
	if [[ -f "$ROOTFS_DIR/etc/pacman.conf" ]]
	then
		# Fix broken space check for pacman in chroot
		sed -i "s/^CheckSpace$/#CheckSpace/" "$ROOTFS_DIR/etc/pacman.conf"

		# Update and populate pacman keys
		_chroot pacman-key --init
		_chroot pacman-key --populate

		# Remove built-in linux kernel and firmware
		_chroot pacman -Rcn --noconfirm linux-firmware
	fi

	# Apt
	if [[ -d "$ROOTFS_DIR/etc/apt/" ]]
	then
		# Remove built-in linux kernel and firmware
		_chroot apt-get -y remove --auto-remove linux-firmware
		_chroot apt-get -y remove --auto-remove "^linux-image.*"
	fi
}

# Create initial chroot home
[[ ! -d "$CHROOT_DIR" ]] && mkdir -p "$CHROOT_DIR"

# Create rootfs instance
if [[ ! -d "$ROOTFS_DIR" ]]
then
	# Fetch latest rootfs tarball for architecture
	fetch_rootfs

	# Extract tarball
	setup_rootfs

	# Mount host binds
	setup_mounts

	# Fix common chroot issues and do post-install config
	post_install &> /dev/null
else
	# Do mounts if rootfs instance already exists
	setup_mounts
fi

# Enter chroot environment
_chroot "$COMMAND"

# Try to unmount rootfs mounts
[[ "$UNMOUNT" -eq 1 ]] && unarch -d "$CHROOT_DIR" -n "$ROOTFS"
