#!/bin/bash
# Written by Draco (tytydraco) @ GitHub

# Path containing rootfs tarball and all rootfs instances
if [[ -d "/home" ]]
then
	CHROOT_DIR="/home/chroot"
else
	CHROOT_DIR="/data/local/chroot"
fi

# The name of the current rootfs instance
ROOTFS="rootfs"

usage() {
	echo -n "Usage: `basename $0` [OPTIONS]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: /data/local/chroot/)
  -n NAME		The name of the rootfs instance to remove (default: rootfs)
  -t			Remove the rootfs tarball if it exists
  -a			Perform a full removal of the chroot container folder
  -h			Show usage
"
}

while getopts "d:n:tah" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			;;
		t)
			RM_TARBALL=1
			;;
		a)
			RM_CONTAINER=1
			;;
		h)
			usage
			exit 0
			;;
		?)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="$PATH:/sbin/.magisk/busybox"

# Check for required dependencies
for dep in id rm unarch
do
	if ! command -v "$dep" &> /dev/null
	then
		echo "[!] Unable to locate dependency $dep. Exiting."
		exit 1
	fi
done

# Check for root permissions
if [[ `id -u` -ne 0 ]]
then
	echo "[!] No root permissions. Exiting."
	exit 1
fi

# Check if chroot container exists
if [[ ! -d "$CHROOT_DIR" ]]
then
	echo "[!] No container at $CHROOT_DIR. Exiting."
	exit 1
fi

# Handle tarball removal
[[ "$RM_TARBALL" -eq 1 ]] && [[ -f "$CHROOT_DIR/rootfs.tar.gz" ]] &&
	rm "$CHROOT_DIR/rootfs.tar.gz"

# Handle contailer removal
if [[ "$RM_CONTAINER" -eq 1 ]]
then
	# Attempt to unmount all rootfs instances
	unarch -d "$CHROOT_DIR" -a
	[[ $? -ne 0 ]] && exit 1

	rm -rf "$CHROOT_DIR"
	exit 0
fi

# Check if rootfs exists
if [[ ! -d "$ROOTFS_DIR" ]]
then
	echo "[!] No instance at $ROOTFS_DIR. Exiting."
	exit 1
fi

# Try to unmount rootfs mounts
unarch -d "$CHROOT_DIR" -n "$ROOTFS"

# If unmount failed, exit here to avoid corruption
[[ $? -ne 0 ]] && exit 1

rm -rf "$ROOTFS_DIR"
