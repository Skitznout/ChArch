#!/bin/sh
# Written by Draco (tytydraco) @ GitHub

usage() {
	echo "Usage:"
	echo "	unarch [-h] [-d drectory] [-n name] [-t]"
	echo ""
	echo "Erase a rootfs instance."
	echo ""
	echo "Options:"
	echo "	-h: Show usage"
	echo "	-d: Specify a chroot container directory (default: /data/local/chroot/)"
	echo "	-n: The name of the rootfs instance to remove (default: rootfs)"
	echo "	-t: Remove the rootfs tarball (overrides other options)"
}

while getopts "hd:n:t" opt; do
	case $opt in
		h)
			usage
			exit 0
			;;
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			;;
		t)
			RM_TARBALL=1
			;;
		?)
			usage
			exit 1
			;;
  esac
done
shift $((OPTIND-1))

# Path containing rootfs tarball and all rootfs instances
if [[ -z "$CHROOT_DIR" ]]
then
	# Prefer a standard Linux directory
	if [[ -d "/home" ]]
	then
		CHROOT_DIR="/home/chroot"
	else
		CHROOT_DIR="/data/local/chroot"
	fi
fi

# The name of the current rootfs instance
[[ -z "$ROOTFS" ]] && ROOTFS="rootfs"

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="$PATH:/sbin/.magisk/busybox"

# Check for required dependencies
for dep in unarch rm id
do
	if ! command -v "$dep" &> /dev/null
	then
		echo "[!] Missing $dep. Exiting."
		exit 1
	fi
done

# Check for root permissions
if [[ `id -u` -ne 0 ]]
then
	echo "[!] No root permissions. Exiting."
	exit 1
fi

# Check if chroot container exists
if [[ ! -d "$CHROOT_DIR" ]]
then
	echo "[!] No container at $CHROOT_DIR. Exiting."
	exit 1
fi

# Handle tarball removal
if [[ "$RM_TARBALL" -eq 1 ]]
then
	if [[ -f "$CHROOT_DIR/rootfs.tar.gz" ]]
	then
		rm "$CHROOT_DIR/rootfs.tar.gz"
		exit 0
	else
		echo "[!] No tarball found in $CHROOT_DIR. Exiting."
		exit 1
	fi
fi

# Check if rootfs exists
if [[ ! -d "$ROOTFS_DIR" ]]
then
	echo "[!] No instance at $ROOTFS_DIR. Exiting."
	exit 1
fi

# Try to unmount rootfs mounts
unarch -d "$CHROOT_DIR" -n "$ROOTFS"

# If unmount failed, exit here to avoid corruption
[[ $? -ne 0 ]] && exit 1

rm -rf "$ROOTFS_DIR"
