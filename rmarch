#!/bin/bash
# Written by Draco (tytydraco) @ GitHub

err() {
	echo -e "\e[91m[!] $@\e[39m"
	exit 1
}

# Path containing rootfs tarball and all rootfs instances
if [[ -d "/home" ]]
then
	CHROOT_DIR="~/charch"
else
	CHROOT_DIR="/data/local/charch"
fi

usage() {
	echo -n "Usage: `basename $0` [OPTIONS] [NAME]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -t			Remove the rootfs tarball if it exists
  -a			Perform a full removal of the chroot container folder
  -h			Show usage
"
}

while getopts ":d:n:tah" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		t)
			RM_TARBALL=1
			;;
		a)
			RM_CONTAINER=1
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# The name of the current rootfs instance
if [[ ! -z "$1" ]]
then
	ROOTFS="$1"
	[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."
else
	ROOTFS="rootfs"
fi

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="$PATH:/sbin/.magisk/busybox"

# Check for required dependencies
for dep in id readlink rm unarch
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ `id -u` -ne 0 ]] && err "No root permissions. Exiting."

# Check if chroot container exists
[[ ! -d "$CHROOT_DIR" ]] && err "No container at $CHROOT_DIR. Exiting."

# Handle tarball removal
if [[ "$RM_TARBALL" -eq 1 ]] && [[ -f "$CHROOT_DIR/rootfs" ]]
then
	rm "$CHROOT_DIR/rootfs"
	exit 0
fi

# Handle contailer removal
if [[ "$RM_CONTAINER" -eq 1 ]]
then
	# Attempt to unmount all rootfs instances
	unarch -d "$CHROOT_DIR" -a
	[[ $? -ne 0 ]] && exit 1

	rm -rf `readlink -f "$CHROOT_DIR"`
	exit 0
fi

# Check if rootfs exists
[[ ! -d "$ROOTFS_DIR" ]] && err "No rootfs instance at $ROOTFS_DIR. Exiting."

# Try to unmount rootfs mounts
unarch -d "$CHROOT_DIR" "$ROOTFS"

# If unmount failed, exit here to avoid corruption
[[ $? -ne 0 ]] && exit 1

rm -rf "$ROOTFS_DIR"
