#!/usr/bin/env bash
# Written by Draco (tytydraco) @ GitHub

# Log in red and exit
err() {
	echo -e " \e[91m*\e[39m $@\e"
	exit 1
}

# Check for required dependencies
for dep in awk fuser grep id lsarch mount readlink seq sort umount
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ `id -u` -ne 0 ]] && err "No root permissions. Exiting."

# Path containing rootfs tarball and rootfs instances
CHROOT_DIR="$HOME/charch"

usage() {
	echo -n "Usage: `basename $0` [OPTIONS] [NAME]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -a			Unmount all rootfs instances in the chroot container directory
  -h			Show usage
"
}

while getopts ":d:ah" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		a)
			UNMOUNT_ALL=1
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# The name of the current rootfs instance
ROOTFS=${1:-rootfs}
[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Check if chroot container exists
[[ ! -d "$CHROOT_DIR" ]] && err "No container at $CHROOT_DIR. Exiting."

unmount_rootfs() {
	# Kill all active processes
	fuser -sk "$1"

	# Do unmounts now
	local fullpath=`readlink -f "$1"`
	for path in `mount | awk '{print $3}' | grep "^$fullpath/" | sort -r`
	do
		umount -l -f "$path"
	done
}

# Unmount the rootfs filesystems
if [[ "$UNMOUNT_ALL" -eq 1 ]]
then
	for rootfs in `lsarch -s -d "$CHROOT_DIR"`
	do
		[[ -d "$CHROOT_DIR/$rootfs" ]] && unmount_rootfs "$CHROOT_DIR/$rootfs"
	done
else
	# Check if rootfs exists
	[[ ! -d "$ROOTFS_DIR" ]] && err "No rootfs instance at $ROOTFS_DIR. Exiting."

	unmount_rootfs "$ROOTFS_DIR"
fi

# Return success regardless of if unmounts silently failed
exit 0
