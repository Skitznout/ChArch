#!/bin/bash
# Written by Draco (tytydraco) @ GitHub

# Path containing rootfs tarball and rootfs instances
if [[ -d "/home" ]]
then
	CHROOT_DIR="/home/chroot"
else
	CHROOT_DIR="/data/local/chroot"
fi

# The name of the current rootfs instance
ROOTFS="rootfs"

# Retry count for unmount before giving up
RETRY_CNT=3

usage() {
	echo -n "Usage: `basename $0` [OPTIONS]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: /data/local/chroot/)
  -n NAME		The name of the rootfs instance to unmount (default: rootfs)
  -h			Show usage
"
}

while getopts "d:n:h" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			;;
		h)
			usage
			exit 0
			;;
		?)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="$PATH:/sbin/.magisk/busybox"

# Check for required dependencies
for dep in awk id mount seq umount
do
	if ! command -v "$dep" &> /dev/null
	then
		echo "[!] Unable to locate dependency $dep. Exiting."
		exit 1
	fi
done

# Check for root permissions
if [[ `id -u` -ne 0 ]]
then
	echo "[!] No root permissions. Exiting."
	exit 1
fi

# Check if rootfs exists
if [[ ! -d "$ROOTFS_DIR" ]]
then
	echo "[!] No instance at $ROOTFS_DIR. Exiting."
	exit 1
fi

# Check if chroot container exists
if [ ! -d "$CHROOT_DIR" ]
then
	echo "[!] No container at $CHROOT_DIR. Exiting."
	exit 1
fi

# Check for optional lsof dependency to automatically kill processes
if command -v lsof &> /dev/null
then
	for pid in `lsof -t "$ROOTFS_DIR"`
	do
		kill "$pid"
	done
fi

umount_all() {
	local ret=0
	for path in `mount | awk '{print $3}' | grep "$ROOTFS_DIR"`
	do
		umount -f "$path" &> /dev/null

		# Fail check
		[[ $? -ne 0 ]] && ret=1
	done

	echo "$ret"
}

# Unmount all rootfs filesystems
for i in `seq $RETRY_CNT`
do
	# Exit early if we succeeded
	[[ `umount_all` -eq 0 ]] && exit 0
done

# If we made it this far, we failed one or more unmounts
echo "[!] Failed to unmount one or more filesystems. Exiting."
exit 1
