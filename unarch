#!/bin/bash
# Written by Draco (tytydraco) @ GitHub

err() {
	echo -e "\e[91m[!] $@\e[39m"
	exit 1
}

# Path containing rootfs tarball and rootfs instances
if [[ -d "/home" ]]
then
	CHROOT_DIR="/home/chroot"
else
	CHROOT_DIR="/data/local/chroot"
fi

# Retry count for unmount before giving up
RETRY_CNT=3

usage() {
	echo -n "Usage: `basename $0` [OPTIONS] [NAME]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -a			Unmount all rootfs instances in the chroot container directory
  -h			Show usage
"
}

while getopts ":d:ah" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		a)
			UNMOUNT_ALL=1
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# The name of the current rootfs instance
if [[ ! -z "$1" ]]
then
	ROOTFS="$1"
	[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."
else
	ROOTFS="rootfs"
fi

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Add busybox components from Magisk
[[ -d "/sbin/.magisk/busybox" ]] && [[ "$PATH" != *"/sbin/.magisk/busybox"* ]] &&
	export PATH="$PATH:/sbin/.magisk/busybox"

# Check for required dependencies
for dep in awk grep id lsarch mount readlink seq umount
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ `id -u` -ne 0 ]] && err "No root permissions. Exiting."

# Check if chroot container exists
[[ ! -d "$CHROOT_DIR" ]] && err "No container at $CHROOT_DIR. Exiting."

unmount_rootfs() {
	for i in `seq $RETRY_CNT`
	do
		# Check for optional lsof dependency to automatically kill processes
		if command -v lsof &> /dev/null
		then
			for pid in `lsof -t "$1"`
			do
				kill "$pid" &> /dev/null
			done
		fi

		# Do sub-unmounts now
		local ret=0
		local fullpath=`readlink -f "$1"`
		for path in `mount | awk '{print $3}' | grep "^$fullpath/"`
		do
			umount -f "$path" &> /dev/null

			# Fail check
			[[ $? -ne 0 ]] && ret=1
		done

		# Return early if we suceeded
		[[ "$ret" -eq 0 ]] && return 0
	done

	# If we made it this far, we failed one or more unmounts
	err "Failed to unmount $fullpath. Exiting."
}

# Unmount the rootfs filesystems
if [[ "$UNMOUNT_ALL" -eq 1 ]]
then
	for rootfs in `lsarch -d "$CHROOT_DIR"`
	do
		unmount_rootfs "$rootfs"
	done
else
	# Check if rootfs exists
	[[ ! -d "$ROOTFS_DIR" ]] && err "No rootfs instance at $ROOTFS_DIR. Exiting."

	unmount_rootfs "$ROOTFS_DIR"
fi
